'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteral(['\n\tdisplay: grid;\n\tgrid-template-rows: ', ';\n\tgrid-template-columns: ', ';\n'], ['\n\tdisplay: grid;\n\tgrid-template-rows: ', ';\n\tgrid-template-columns: ', ';\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n\tgrid-row-start: ', ';\n\tgrid-row-end: ', ';\n\tgrid-column-start: ', ';\n\tgrid-column-end: ', ';\n\tposition: relative;\n'], ['\n\tgrid-row-start: ', ';\n\tgrid-row-end: ', ';\n\tgrid-column-start: ', ';\n\tgrid-column-end: ', ';\n\tposition: relative;\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /**
                                                                                                                                                   * Copyright 2017 Google LLC
                                                                                                                                                   * 
                                                                                                                                                   * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                   * you may not use this file except in compliance with the License.
                                                                                                                                                   * You may obtain a copy of the License at
                                                                                                                                                   * 
                                                                                                                                                   * https://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                   * 
                                                                                                                                                   * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                   * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                   * See the License for the specific language governing permissions and
                                                                                                                                                   * limitations under the License.
                                                                                                                                                   */

var GridDiv = _styledComponents2.default.div(_templateObject, function (props) {
	return props.rowHeaders || 'initial';
}, function (props) {
	return props.colHeaders || 'initial';
});

var GridCell = _styledComponents2.default.div(_templateObject2, function (props) {
	return props.top + 1;
}, function (props) {
	return props.bottom + 2;
}, function (props) {
	return props.left + 1;
}, function (props) {
	return props.right + 2;
});

var validateRows = function validateRows(rows) {
	var colsRegEx = /[\s]+/;
	var toValidate = rows.map(function (row) {
		return row.split(colsRegEx);
	}).map(function (cols) {
		return cols.reduce(function (acc, val) {
			return val.length == 0 ? acc : acc.concat([val]);
		}, []);
	});

	var colCounts = toValidate.map(function (row) {
		return row.length;
	});
	if (colCounts.length == 1) {
		return toValidate;
	}
	var allSame = colCounts.slice(1).reduce(function (acc, val) {
		return acc && val == colCounts[1];
	}, true);
	if (!allSame) {
		throw 'Rows 1 - ' + colCounts.length + ' should have the same number of ' + 'columns.';
	}
	if (colCounts[1] != 1 && colCounts[0] != colCounts[1] - 1) {
		throw 'The column headers row has too many columns.';
	}
	return toValidate;
};

var extractDimensions = function extractDimensions(layout) {
	var areas = {};

	var _loop = function _loop(i) {
		var _loop2 = function _loop2(j) {
			if (layout[i][j] == '..') {
				return 'continue';
			}
			var cellAreas = layout[i][j].split(',');
			cellAreas.forEach(function (area) {
				if (!areas[area]) {
					areas[area] = {
						top: i,
						left: j,
						bottom: i,
						right: j
					};
				} else {
					areas[area] = _extends({}, areas[area], {
						bottom: i,
						right: j
					});
				}
			});
		};

		for (var j = 0; j < layout[i].length; j++) {
			var _ret2 = _loop2(j);

			if (_ret2 === 'continue') continue;
		}
	};

	for (var i = 0; i < layout.length; i++) {
		_loop(i);
	}
	return areas;
};

var GridComponentFactory = function GridComponentFactory() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	var layoutString = args[0][0];
	var rows = validateRows(layoutString.split('\n').reduce(function (acc, row) {
		// Verify that the row is not empty.
		var match = row.match(/[\s]*/);
		if (row.length > 0 && match && match[0].length != match.input.length) {
			return acc.concat(row);
		}
		return acc;
	}, []));

	var rowHeaders = null;
	if (rows.length > 1) {
		// Remove the first row of layout data if this is a grid. If it's only
		// row headers, do not remove the first row of data.
		var rowHeadersToUse = rows[0].length > 1 ? rows.slice(1) : rows;
		rowHeaders = rowHeadersToUse.reduce(function (acc, row) {
			return acc.concat([row[0]]);
		}, []).join(' ');
	}
	var colHeaders = null;
	if (rows[0].length > 1) {
		colHeaders = rows[0].join(' ');
	}
	var extractedDimensions = null;
	var sortedDimensionKeys = null;
	if (rows.length > 1 && rows[1].length > 1) {
		// Remove the column headers and row headers.
		var layout = rows.slice(1).map(function (row) {
			return row.slice(1);
		});
		extractedDimensions = extractDimensions(layout);
		// The grid items are sorted alphabetically and matched against the
		// corresponding child element. Unless the child element contains a
		// gridItem property.
		sortedDimensionKeys = Object.keys(extractedDimensions).sort();
	}
	// Return a wrapper component that lays out its children using a generated
	// grid and grid items. Individual grid items are used to wrap the actual
	// child elements.
	var component = function component(props) {
		var children = props.children;
		if (extractedDimensions) {
			var numberOfChildren = _react2.default.Children.count(props.children);
			if (numberOfChildren > sortedDimensionKeys.length) {
				throw 'There are more children than defined areas for the grid.';
			} else if (numberOfChildren < sortedDimensionKeys.length) {
				throw 'There are fewer children than defined areas for the grid.';
			}
			// Use cloneElement with an automatically assigned postion: absolute
			// style parameter. This allows positioning attributes of the child
			// element to behave as expected.
			children = _react2.default.Children.map(props.children, function (child, index) {
				var dimension = child.props.item && extractedDimensions[child.props.item] || extractedDimensions[sortedDimensionKeys[index]];
				return _react2.default.createElement(
					GridCell,
					{
						top: dimension.top,
						bottom: dimension.bottom,
						left: dimension.left,
						right: dimension.right },
					_react2.default.cloneElement(child, {
						style: _extends({}, child.style || {}, { position: 'absolute' })
					})
				);
			});
		}
		return _react2.default.createElement(
			GridDiv,
			{
				rowHeaders: rowHeaders,
				colHeaders: colHeaders,
				className: props.className },
			children
		);
	};
	// Add properties for unit testing purposes.
	component.rowHeaders = rowHeaders;
	component.colHeaders = colHeaders;
	component.extractedDimensions = extractedDimensions;
	return component;
};
exports.default = GridComponentFactory;
//# sourceMappingURL=grid.js.map